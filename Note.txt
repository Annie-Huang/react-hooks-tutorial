https://www.youtube.com/playlist?list=PLC3y8-rFHvwisvxhZ135pogtX7_Oe3Q3A
https://github.com/gopinav/React-Tutorials
https://github.com/Annie-Huang/react-hooks-tutorial

UP TO:
React Hooks Tutorial - 2 - useState Hook
React Hooks Tutorial - 3 - useState with previous state
React Hooks Tutorial - 4 - useState with object
React Hooks Tutorial - 7 - useEffect after render
React Hooks Tutorial - 8 - Conditionally run effects
=================================================================================



1. Why Hooks
#############################
javascript class problem:
Understand how this keywor workds in Javascript is difficult
Remember to bind even handlers in class components.
Classes don't minify very well and make hot relaoding very unreliable

React problem:
There is no particular way to reuse stateful component logic
HOC and render props patterns do address this problem
Makes the code harder to follow
There is a need to share stateful logic in a better way

Also:
Create components for complex scenarios suhc as data fetching and subscribing to events
Related code is not organized in one place
Ex: Data fetching - In componentDidMount and componentDidUpdate
Ex: Event listeners - In componentDidMount and componentWillUnmount.
Because of stateful logic - Cannot break components into smaller ones

Summary:
Hooks are a new feature addition in React version 16.8
They allow you to use React features without having to write a class
Avoid the whole confusion with 'this' keyword.
Allow you to reuse stateful logic
Organize the logic inside a component into reusable isolluated unit.

2. Rules of Hooks
#############################
Only call hooks at the Top Level: Don't call Hooks inside loops, conditions, or nested functions
Only call Hooks from React Functions:
    Call them from within React functional components and not just any regular JavaScript functions.


Summary - useState
#############################
The useState hook lets you add state to functional components
In classes, the state is always an object.
With the useState hook, the state doesn't have to be an object.
The useState hook returns an array with 2 elements
The first element is the current value of the state, and the second element is a state setter function
New state value depends on the previous state value? You can pass a function to the setter function.
When dealing with objects or arrays. always make sure to spread your state variable and then call the setter function

=============================================================================

C:\react\react-hooks-tutorial>create-react-app state-hook
C:\react\react-hooks-tutorial>create-react-app effect-hook
