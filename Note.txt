https://www.youtube.com/playlist?list=PLC3y8-rFHvwisvxhZ135pogtX7_Oe3Q3A
https://github.com/gopinav/React-Tutorials
https://github.com/Annie-Huang/react-hooks-tutorial

https://jsonplaceholder.typicode.com/
https://jsonplaceholder.typicode.com/posts
https://jsonplaceholder.typicode.com/posts/1

UP TO:
React Hooks Tutorial - 2 - useState Hook
React Hooks Tutorial - 3 - useState with previous state
React Hooks Tutorial - 4 - useState with object
React Hooks Tutorial - 7 - useEffect after render
React Hooks Tutorial - 8 - Conditionally run effects
React Hooks Tutorial - 10 - useEffect with cleanup
React Hooks Tutorial - 11 - useEffect with incorrect dependency
React Hooks Tutorial - 12 - Fetching data with useEffect Part 1
React Hooks Tutorial - 13 - Fetching data with useEffect Part 2
React Hooks Tutorial - 14 - Fetching data with useEffect Part 3
React Hooks Tutorial - 16 - useContext Hook Part 2
React Hooks Tutorial - 20 - useReducer (complex state & action)


Important files:
C:\react\react-hooks-tutorial\effect-hook\src\components\IntervalHookCounter.js
C:\react\react-hooks-tutorial\effect-hook\src\components\DataFetching.js

=================================================================================



1. Why Hooks
#############################
javascript class problem:
Understand how this keywor workds in Javascript is difficult
Remember to bind even handlers in class components.
Classes don't minify very well and make hot relaoding very unreliable

React problem:
There is no particular way to reuse stateful component logic
HOC and render props patterns do address this problem
Makes the code harder to follow
There is a need to share stateful logic in a better way

Also:
Create components for complex scenarios suhc as data fetching and subscribing to events
Related code is not organized in one place
Ex: Data fetching - In componentDidMount and componentDidUpdate
Ex: Event listeners - In componentDidMount and componentWillUnmount.
Because of stateful logic - Cannot break components into smaller ones

Summary:
Hooks are a new feature addition in React version 16.8
They allow you to use React features without having to write a class
Avoid the whole confusion with 'this' keyword.
Allow you to reuse stateful logic
Organize the logic inside a component into reusable isolluated unit.

2. Rules of Hooks
#############################
Only call hooks at the Top Level: Don't call Hooks inside loops, conditions, or nested functions
Only call Hooks from React Functions:
    Call them from within React functional components and not just any regular JavaScript functions.


3. Summary - useState
#############################
The useState hook lets you add state to functional components
In classes, the state is always an object.
With the useState hook, the state doesn't have to be an object.
The useState hook returns an array with 2 elements
The first element is the current value of the state, and the second element is a state setter function
New state value depends on the previous state value? You can pass a function to the setter function.
When dealing with objects or arrays. always make sure to spread your state variable and then call the setter function


4. Context
#############################
Context provides a way to pass data through the component tree without having to pass props down manually at every level.
e.g.
language preference, UIP, authenticated user


5. useReducer
#############################
useReducer is a hook that is used for state management
It is an alternative to useState
What's the different?
useState is built using useReducer

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce
const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) => accumulator + currentValue;
// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));
// expected output: 15


reducer vs useReducer
reducer in JavaScript                               | useReducer in React
array.reduce(reducer, initialValue)                 | useReducer(reducer, initialState)
singleValue = reducer(accumulator, itemValue)       | newState = reducer(currentState, action)
reduce method returns a single value                | useReducer returns a pair of value. [newState, dispatch]


6. useReducer with useContext
#############################
useReducer - Local state management
Share state between components - Global state management
useReducer + useContext


7. useReducer vs useState
#############################

DataFetchingOne: useState + useEffect
DataFetchingTwp: useReducer + useEffect

Scenario                        | useState                                          | useReducer
Type of state                   | Number, String, Boolean (e.g. count:number)       | Object or Array (people object)
Number of state transitions      | One or two                                        | Too many (if you see 5-6 setXX calls, should definitely move to reducer, so everything is in one place, easy to read by other developers)
Related state transitions?      | No                                                | Yes (if mutliple of the properties all update at the same time for a state change, choose useReducer, easy to read)
Business logic                  | No business logic                                 | Complex business logic
Local vs global                 | Local                                             | Global


=============================================================================

C:\react\react-hooks-tutorial>create-react-app state-hook
C:\react\react-hooks-tutorial>create-react-app effect-hook
C:\react\react-hooks-tutorial\effect-hook>npm install axios
C:\react\react-hooks-tutorial>create-react-app context-hook
C:\react\react-hooks-tutorial>create-react-app reducer-hook
C:\react\react-hooks-tutorial\reducer-hook>npm install axios
